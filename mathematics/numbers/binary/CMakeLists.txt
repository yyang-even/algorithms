add_library(binary
    count_set_bits.cpp
    is_power_of_2.cpp
    log_base_2.cpp)

CompileBenchmarkExe(abs)
CompileTestExe(abs)

CompileBenchmarkExe(are_opposite_signs)
CompileTestExe(are_opposite_signs)

CompileBenchmarkExe(byte_range)
CompileTestExe(byte_range)

CompileBenchmarkExe(calculate_xor_of_all_numbers_1_to_n)
CompileTestExe(calculate_xor_of_all_numbers_1_to_n)

CompileBenchmarkExe(case_conversion)
CompileTestExe(case_conversion)

CompileBenchmarkExe(conditionally_set_or_clear)
CompileTestExe(conditionally_set_or_clear)

CompileBenchmarkExe(conditionally_negate)
CompileTestExe(conditionally_negate)

CompileBenchmarkExe(count_diff_bits_of_two
    binary)
CompileTestExe(count_diff_bits_of_two
    binary)

CompileBenchmarkExe(count_set_bits)
CompileTestExe(count_set_bits)

CompileBenchmarkExe(count_trailing_zeros)
CompileTestExe(count_trailing_zeros)

CompileBenchmarkExe(count_unset_bits)
CompileTestExe(count_unset_bits)

CompileBenchmarkExe(clear_all_bits_except_the_last_set_bit)
CompileTestExe(clear_all_bits_except_the_last_set_bit)

CompileBenchmarkExe(clear_bit)
CompileTestExe(clear_bit)

CompileBenchmarkExe(endianness)
CompileTestExe(endianness)

CompileBenchmarkExe(find_first_bit_set)
CompileTestExe(find_first_bit_set)

CompileBenchmarkExe(find_the_only_set_bit_position
    binary)
CompileTestExe(find_the_only_set_bit_position
    binary)

CompileBenchmarkExe(is_bit_set)
CompileTestExe(is_bit_set)

CompileBenchmarkExe(is_multiple_of_4)
CompileTestExe(is_multiple_of_4)

CompileBenchmarkExe(is_negative)
CompileTestExe(is_negative)

CompileBenchmarkExe(is_power_of_2)
CompileTestExe(is_power_of_2)

CompileBenchmarkExe(log_base_2)
CompileTestExe(log_base_2)

CompileBenchmarkExe(min_and_max)
CompileTestExe(min_and_max)

CompileBenchmarkExe(masked_bits_merge)
CompileTestExe(masked_bits_merge)

CompileBenchmarkExe(modulus)
CompileTestExe(modulus)

CompileBenchmarkExe(morton_number)
CompileTestExe(morton_number)

CompileBenchmarkExe(parity)
CompileTestExe(parity)

CompileBenchmarkExe(permutation)
CompileTestExe(permutation)

CompileBenchmarkExe(reverse)
CompileTestExe(reverse)

CompileBenchmarkExe(round_up_to_power_of_2)
CompileTestExe(round_up_to_power_of_2)

CompileBenchmarkExe(set_all_bits_after_most_significant_bit)
CompileTestExe(set_all_bits_after_most_significant_bit)

CompileBenchmarkExe(set_bit)
CompileTestExe(set_bit)

CompileBenchmarkExe(sign_extending)
CompileTestExe(sign_extending)

CompileBenchmarkExe(stripping_off_lowest_set_bit)
CompileTestExe(stripping_off_lowest_set_bit)

CompileBenchmarkExe(swap)
CompileTestExe(swap)

CompileBenchmarkExe(swap_odd_even_bits)
CompileTestExe(swap_odd_even_bits)

CompileBenchmarkExe(toggle_all_bits_after_most_significant_bit)
CompileTestExe(toggle_all_bits_after_most_significant_bit)

CompileBenchmarkExe(toggle_bit)
CompileTestExe(toggle_bit)

CompileBenchmarkExe(to_binary_string)
CompileTestExe(to_binary_string)

CompileBenchmarkExe(twos_complement)
CompileTestExe(twos_complement)

CompileBenchmarkExe(zig_zag_encoding)
CompileTestExe(zig_zag_encoding)
